<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>hlsl</string>
		<string>fxh</string>
		<string>compute</string>
		<string>shader</string>
	</array>
	<key>name</key>
	<string>High Level SL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.double-slash.hlsl</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.double-slash.hlsl</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.line.multline.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Numeric constants</string>
			<key>match</key>
			<string>\b(0[xX][0-9a-fA-F]+([lLuU])?)|\b([0-9]+\.?[0-9]*([fFhHlLuU])?)|(\.[0-9]+([fFhHlL])?)\b</string>
			<key>name</key>
			<string>constant.numeric.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Language constants</string>
			<key>match</key>
			<string>\b(false|FALSE|NULL|true|TRUE)\b</string>
			<key>name</key>
			<string>constant.language.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Preprocessor directives</string>
			<key>match</key>
			<string>^\s*#\s*(define|elif|else|endif|error|if|ifdef|ifndef|include|line|pragma|undef)\b</string>
			<key>name</key>
			<string>keyword.control.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Preprocessor functions</string>
			<key>match</key>
			<string>\b(defined)\b</string>
			<key>name</key>
			<string>keyword.control.functions.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Basic control keywords</string>
			<key>match</key>
			<string>\b(break|case|continue|default|discard|do|else|for|goto|if|return|switch|while)\b</string>
			<key>name</key>
			<string>keyword.control.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Variable modifiers</string>
			<key>match</key>
			<string>\b(in|out|inout|extern|nointerpolation|precise|shared|groupshared|static|uniform|volatile|const|row_major|column_major)\b</string>
			<key>name</key>
			<string>keyword.modifier.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Primitive geometry types</string>
			<key>match</key>
			<string>\b(point|line|triangle|lineadj|triangleadj)\b</string>
			<key>name</key>
			<string>storage.modifier.primitive.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Geometry stream types</string>
			<key>match</key>
			<string>\b(PointStream|LineStream|TriangleStream)\b</string>
			<key>name</key>
			<string>storage.modifier.stream.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Semantics</string>
			<key>match</key>
			<string>(?&lt;=:)\s*(((BINORMAL|BLENDINDICIES|BLENDWEIGHT|COLOR|DEPTH|NORMAL|POSITION|POSITIONT|PSIZE|TANGENT|TEXCOORD|FOG|TESSFACTOR|VFACE|VPOS|SV_(DEPTH|POSITION|TARGET|Depth|Position|Target|ClipDistance|CullDistance|Coverage|Depth|DepthGreaterEqual|DepthLessEqual|DispatchThreadID|DomainLocation|GroupID|GroupIndex|GroupThreadID|GSInstanceID|InnerCoverage|InsideTessFactor|InstanceID|IsFrontFace|OutputControlPointID|Position|PrimitiveID|RenderTargetArrayIndex|SampleIndex|StencilRef|Target|TessFactor|VertexID|ViewportArrayIndex))((1[0-5]|[0-9]))?)\b|register|packoffset)</string>
			<key>name</key>
			<string>keyword.semantics.hlsl</string>
			<key>newVersion</key>
			<string>(?#In-case I ever need this)(?&lt;=:)\s*([a-zA-Z0-9_]+)\b</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>String</string>
			<key>match</key>
			<string>"(?:[^"\\]|\\.)*"</string>
			<key>name</key>
			<string>string.double.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Basic types</string>
			<key>match</key>
			<string>\b(bool|double|dword|float|half|real|int|min10float|min16float|min12int|min16int|min16uint|struct|uint|void|cbuffer|tbuffer|vector|matrix|string)\b</string>
			<key>name</key>
			<string>storage.type.scalar.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Vector forms of scalar types</string>
			<key>match</key>
			<string>\b(bool|double|float|half|real|int|uint|min10float|min16float|min12int|min16int|min16uint)[1-4]\b</string>
			<key>name</key>
			<string>storage.type.vector.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Componenets of vectors</string>
			<key>match</key>
			<string>(?&lt;=\.)([rgba]{1,4}|[xzyw]{1,4})\b</string>
			<key>name</key>
			<string>storage.type.access.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Matrix forms of scalar types</string>
			<key>match</key>
			<string>\b(double|float|half|real|int|uint|min10float|min16float|min12int|min16int|min16uint)[1-4]x[1-4]\b</string>
			<key>name</key>
			<string>storage.type.matrix.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Float type modifier</string>
			<key>match</key>
			<string>\b(snorm|unorm)\b</string>
			<key>name</key>
			<string>keyword.modifier.float.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Typedef</string>
			<key>match</key>
			<string>\b(typedef)\b</string>
			<key>name</key>
			<string>keyword.other.typedef.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Sampler types</string>
			<key>match</key>
			<string>\b(sampler|sampler1D|sampler2D|sampler3D|SamplerComparisonState|samplerCUBE|sampler_state|SamplerState)\b</string>
			<key>name</key>
			<string>storage.type.sampler.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Attributes</string>
			<key>match</key>
			<string>\b(maxvertexcount|domain|earlydepthstencil|instance|maxtessfactor|numthreads|outputcontrolpoints|outputtopology|partitioning|patchconstantfunc|fastopt|loop|unroll|allow_uav_condition|branch|flatten|forcecase|call)\b</string>
			<key>name</key>
			<string>keyword.attribute.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Attributes</string>
			<key>match</key>
			<string>(?&lt;=\()\s*(tri|quad|isoline|point|line|triangle_cw|triangle_ccw|integer|fractional_even|fractional_odd|pow2)\b\s*(?=\))</string>
			<key>name</key>
			<string>constant.language.attribute.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Direct3D 9 Texture keyword</string>
			<key>match</key>
			<string>\b(Texture)\b</string>
			<key>name</key>
			<string>keyword.sampler.texture.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Sampler state members</string>
			<key>match</key>
			<string>\b(AddressU|AddressV|AddressW|BorderColor|Filter|MaxAnisotropy|MaxLOD|MinLOD|MipLODBias)\b</string>
			<key>name</key>
			<string>variable.other.sampler.state.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Sampler comparison state members</string>
			<key>match</key>
			<string>\b(ComparisonFunc|ComparisonFilter)\b</string>
			<key>name</key>
			<string>variable.other.sampler-comparison.state.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>State variables</string>
			<key>match</key>
			<string>\b(AB_BLENDFACTOR|AB_SAMPLEMASK|AddressU|AddressV|AddressW|AlphaBlendEnable|AlphaFunc|AlphaRef|AlphaTestEnable|AlphaToCoverageEnable|Ambient|AmbientMaterialSource|AntialiasedLineEnable|BackStencilFail|BackStencilFunc|BackStencilPass|BackStencilZFail|BlendEnable|BlendOp|BlendOpAlpha|BlendState|BorderColor|Clipping|ClipPlaneEnable|ColorVertex|ColorWriteEnable|ComparisonFunc|CullMode|DepthBias|DepthBiasClamp|DepthEnable|DepthFunc|DepthStencilState|DepthWriteMask|DestBlend|DestBlendAlpha|DiffuseMaterialSource|DitherEnable|DS_STENCILREF|EmissiveMaterialSource|FillMode|Filter|FogColor|FogDensity|FogEnable|FogEnd|FogStart|FogTableMode|FogVertexMode|FrontCounterClockwise|FrontStencilFail|FrontStencilFunc|FrontStencilPass|FrontStencilZFail|GeometryShader|IndexedVertexBlendEnable|LastPixel|LightAmbient|LightAttenuation[0-2]|LightDiffuse|LightDirection|LightEnable|LightFalloff|Lighting|LightPhi|LightPosition|LightRange|LightSpecular|LightTheta|LightType|LocalViewer|MagFilter|MaterialAmbient|MaterialDiffuse|MaterialEmissive|MaterialPower|MaterialSpecular|MaxAnisotropy|MaxLOD|MaxMipLevel|MinFilter|MinLOD|MipFilter|MipLODBias|MipMapLodBias|MultiSampleAntialias|MultisampleEnable|MultiSampleMask|NormalizeNormals|PatchSegments|PixelShader|PointScale|PointScaleEnable|PointSize|PointSpriteEnable|RangeFogEnable|RasterizerState|RenderTargetWriteMask|ScissorEnable|ShadeMode|SlopeScaledDepthBias|SlopeScaleDepthBias|SpecularEnable|SpecularMaterialSource|SrcBlend|SrcBlendAlpha|SRGBTexture|StencilEnable|StencilFail|StencilFunc|StencilMask|StencilPass|StencilReadMask|StencilRef|StencilWriteMask|StencilZFail|TextureFactor|TweenFactor|VertexBlend|VertexShader|Wrap([0-9]|1[0-5])|ZClipEnable)\b</string>
			<key>name</key>
			<string>support.constant.state.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Language constants</string>
			<key>match</key>
			<string>\b([0-3]WEIGHTS|ADD|ALWAYS|ANISOTROPIC|BLENDFACTOR|BORDER|BOTHINVSRCALPHA|BOTHSRCALPHA|CCW|CLAMP|COLOR1|COLOR2|CONVOLUTIONMONO|CW|DECR|DECRSAT|DESTALPHA|DESTCOLOR|DIRECTIONAL|DISABLE|EQUAL|EXP|EXP2|FALSE|FLAT|GAUSSIANQUAD|GOURAUD|GREATER|GREATEREQUAL|INCR|INCRSAT|INVBLENDFACTOR|INVDESTALPHA|INVDESTCOLOR|INVERT|INVSRCALPHA|INVSRCCOLOR|INVSRCCOLOR2|KEEP|LESS|LESSEQUAL|LINEAR|MATERIAL|MAX|MIN|MIRROR|MIRRORONCE|NEVER|NONE|NOTEQUAL|NULL|ONE|PHONG|POINT|PYRAMIDALQUAD|REPLACE|REVSUBTRACT|SOLID|SPOT|SRCALPHA|SRCALPHASAT|SRCCOLOR|SRCCOLOR2|SUBTRACT|TRUE|TWEENING|TWOSIDED|USEW|WIREFRAME|WRAP|ZERO)\b</string>
			<key>name</key>
			<string>constant.language.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Shader models</string>
			<key>match</key>
			<string>\b(ps_1_[1-4]|vs_1_1|(ps|vs)_2_([0ab]|sw)|x?[pv]s_3_0|[gpv]s_4_[01]|[cpgv]s_(4_0|4_1|5_0)|ds_5_0)\b</string>
			<key>name</key>
			<string>support.type.model.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Object types</string>
			<key>match</key>
			<string>\b(AppendStructuredBuffer|Buffer|ByteAddressBuffer|ConsumeStructuredBuffer|InputPatch|OutputPatch|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture1D|RWTexture1DArray|RWTexture2D|RWTexture2DArray|RWTexture3D|StructuredBuffer|Texture1D|Texture1DArray|Texture2D|Texture2DArray|Texture2DMS|Texture2DMSArray|Texture3D|TextureCube|TextureCubeArray)\b</string>
			<key>name</key>
			<string>storage.type.object.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Intrinsic functions</string>
			<key>match</key>
			<string>\b(abort|abs|acos|all|AllMemoryBarrier|AllMemoryBarrierWithGroupSync|any|asdouble|asfloat|asin|asint|asuint|atan|atan2|ceil|clamp|clip|cos|cosh|countbits|cross|D3DCOLORtoUBYTE4|ddx|ddx_coarse|ddx_fine|ddy|ddy_coarse|ddy_fine|degrees|determinant|DeviceMemoryBarrier|DeviceMemoryBarrierWithGroupSync|distance|dot|errorf|EvaluateAttributeAtCentroid|EvaluateAttributeAtSample|EvaluateAttributeSnapped|exp|exp2|f16tof32|f32tof16|faceforward|firstbithigh|firstbitlow|floor|fma|fmod|frac|frexp|fwidth|GetRenderTargetSampleCount|GetRenderTargetSamplePosition|GroupMemoryBarrier|GroupMemoryBarrierWithGroupSync|InterlockedAdd|InterlockedAnd|InterlockedCompareExchange|InterlockedCompareStore|InterlockedExchange|InterlockedMax|InterlockedMin|InterlockedOr|InterlockedXor|isfinite|isinf|isnan|ldexp|length|lerp|lit|log|log10|log2|mad|max|min|modf|msad4|mul|noise|normalize|pow|printf|Process2DQuadTessFactorsAvg|Process2DQuadTessFactorsMax|Process2DQuadTessFactorsMin|ProcessIsolineTessFactors|ProcessQuadTessFactorsAvg|ProcessQuadTessFactorsMax|ProcessQuadTessFactorsMin|ProcessTriTessFactorsAvg|ProcessTriTessFactorsMax|ProcessTriTessFactorsMin|radians|rcp|reflect|refract|reversebits|round|rsqrt|saturate|sign|sin|sincos|sinh|smoothstep|sqrt|step|tan|tanh|tex1D|tex1Dbias|tex1Dgrad|tex1Dlod|tex1Dproj|tex2D|tex2Dbias|tex2Dgrad|tex2Dlod|tex2Dproj|tex3D|tex3Dbias|tex3Dgrad|tex3Dlod|tex3Dproj|texCUBE|texCUBEbias|texCUBEgrad|texCUBElod|texCUBEproj|transpose|trunc)\b</string>
			<key>name</key>
			<string>keyword.function.intrinsic.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Function declaration</string>
			<key>match</key>
			<string>(\b([a-zA-Z0-9_]+)\b)(?=\s*\()</string>
			<key>name</key>
			<string>entity.name.function.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Structure declaration</string>
			<key>match</key>
			<string>(?&lt;=(struct))[^\S\r\n]*([a-zA-Z0-9_]+)\b</string>
			<key>name</key>
			<string>entity.name.struct.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Buffer declaration</string>
			<key>match</key>
			<string>(?&lt;=[ct]buffer)[^\S\r\n]*([a-zA-Z0-9_]+)\b</string>
			<key>name</key>
			<string>entity.name.buffer.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Macro</string>
			<key>match</key>
			<string>((?&lt;=#(ifdef|undef))|(?&lt;=#(ifndef|define))|(?&lt;=defined\()|(?&lt;=defined\s\())[^\S\r\n\)]*([a-zA-Z0-9_]+)\b</string>
			<key>name</key>
			<string>entity.name.macro.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Semantic macro</string>
			<key>match</key>
            <string>(?&lt;=:)\s*([A-Z]+[a-zA-Z_]+[0-9]*)\b(?=\s*;)</string>
			<key>name</key>
			<string>entity.name.semantic_macro.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pragma command</string>
			<key>match</key>
			<string>(?&lt;=#pragma)\s*(def|message|pack_matrix|warning)\b</string>
			<key>name</key>
			<string>keyword.function.pragma.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Illegal pragma command</string>
			<key>match</key>
			<string>(?&lt;=#pragma)(?!.*(def|message|pack_matrix|warning)).+</string>
			<key>name</key>
			<string>invalid.illegal.pragma.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Type macro</string>
			<key>match</key>
			<string>^\s*(?!(const|return|snorm|typedef|unorm|((vector|matrix|(bool|double|float|half|real|int|uint)([1-4](x[1-4])?)?|(min16(float|int|uint))|min10float|min12int)\b)))[a-zA-Z0-9_]+\s+(?=[a-zA-Z0-9_]+)</string>
			<key>name</key>
			<string>entity.name.macro-type.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Geometry stream type macro</string>
			<key>match</key>
			<string>\b(PointStream|LineStream|TriangleStream)\b</string>
			<key>name</key>
			<string>storage.modifier.stream.hlsl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Geometry stream object type</string>
			<key>match</key>
			<string>(?&lt;=[&lt;])(\b[a-zA-Z0-9_]+\b)(?=[&gt;])</string>
			<key>name</key>
			<string>variable.parameter.streamobject.hlsl</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.hlsl</string>
	<key>uuid</key>
	<string>79f67826-5bc3-4067-a1d5-46e7ffe52919</string>
</dict>
</plist>
